import * as tslib_1 from "tslib";
import { Injectable, Inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Router } from '@angular/router';
import { of } from 'rxjs';
import { tap, map } from 'rxjs/operators';
import { SessionStorageVars } from './session-storage';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@angular/router";
let TbAuthService = class TbAuthService {
    constructor(env, http, router) {
        this.env = env;
        this.http = http;
        this.router = router;
        this.redirectUrl = '/';
    }
    isValidToken(autologinToken = null) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const authtoken = sessionStorage.getItem(SessionStorageVars.JWT);
            console.log('isValidToken - authtoken', authtoken);
            if (!authtoken && !autologinToken) {
                return of(false);
            }
            return this.http
                .post(this.getIsValidTokenUrl(), autologinToken ? autologinToken : {})
                .pipe(tap((jObj) => {
                console.log('isValidToken - response', jObj);
                if (!jObj.Result) {
                    jObj.Message = jObj.Message ? jObj.Message : 'Login error...';
                    // sessionStorage.removeItem(SessionStorageVars.JWT);
                    // sessionStorage.removeItem(SessionStorageVars.CULTURE);
                    // sessionStorage.removeItem(SessionStorageVars.UI_CULTURE);
                    this.errorMessage = jObj.Message;
                }
            }))
                .toPromise();
        });
    }
    login(loginRequest) {
        return this.http.post(this.getLoginUrl(), loginRequest).pipe(map((loginResponse) => {
            const respCulture = loginResponse.Culture === undefined || loginResponse.Culture.length === 0
                ? window.navigator.language
                : loginResponse.Culture;
            const respUiCulture = loginResponse.UICulture === undefined || loginResponse.UICulture.length === 0
                ? window.navigator.language
                : loginResponse.UICulture;
            this.saveCulture(respCulture, respUiCulture);
            if (!loginResponse.Result) {
                loginResponse.Message = loginResponse.Message ? loginResponse.Message : 'Login error...';
                sessionStorage.removeItem(SessionStorageVars.JWT);
                this.errorMessage = loginResponse.Message;
                return loginResponse;
            }
            sessionStorage.setItem(SessionStorageVars.JWT, loginResponse.JwtToken);
            return loginResponse;
        }));
    }
    getIsValidTokenUrl() {
        return this.getBaseUrl() + 'token/';
    }
    getLoginUrl() {
        return this.getBaseUrl() + 'tokens/';
        return this.getBaseUrl() + 'login/';
    }
    getLogoutUrl() {
        return this.getBaseUrl() + 'logout/';
    }
    getRedirectUrl() {
        return this.redirectUrl;
    }
    setRedirectUrl(url) {
        this.redirectUrl = url;
    }
    /**
     * Ritorna la base url del backend,
     * caricata da un file di configurazione caricato dinamicamente (assets/environment.json)
     */
    getBaseUrl() {
        if (this.loginUrl)
            return this.loginUrl;
        this.loginUrl = this.env.auth.url;
        return this.loginUrl;
    }
    logoff() { }
    saveCulture(culture = '', uiCulture = '') {
        localStorage.setItem(SessionStorageVars.CULTURE, culture);
        localStorage.setItem(SessionStorageVars.UI_CULTURE, uiCulture);
    }
};
TbAuthService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TbAuthService_Factory() { return new TbAuthService(i0.ɵɵinject("env"), i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router)); }, token: TbAuthService, providedIn: "root" });
TbAuthService = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    }),
    tslib_1.__param(0, Inject('env')),
    tslib_1.__metadata("design:paramtypes", [Object, HttpClient, Router])
], TbAuthService);
export { TbAuthService };
//# sourceMappingURL=data:application/json;base64,