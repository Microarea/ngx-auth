{"version":3,"file":"tb-auth.js.map","sources":["ng://@tb/auth/lib/session-storage.ts","ng://@tb/auth/lib/auth.service.ts","ng://@tb/auth/lib/auth.guard.ts","ng://@tb/auth/lib/auth.interceptor.ts","ng://@tb/auth/lib/models/login-request.ts","ng://@tb/auth/lib/pages/login.component.ts","ng://@tb/auth/lib/logout.component.ts","ng://@tb/auth/lib/auth.module.ts"],"sourcesContent":["export class SessionStorageVars {\r\n    public static JWT = 'M4_jwt_token';\r\n    public static CULTURE = 'M4_culture';\r\n    public static UI_CULTURE = 'M4_ui_culture';\r\n    public static ACCOUNT_NAME = 'M4_account_name';\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\nimport { of, Observable } from 'rxjs';\nimport { tap, map } from 'rxjs/operators';\n\nimport { SessionStorageVars } from './session-storage';\n\nimport { AutologinToken } from './models/autologin-token.model';\nimport { LoginRequest } from './models/login-request';\nimport { LoginResponse } from './models/login-response';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TbAuthService {\n    public loginUrl: string;\n    public errorMessage: string;\n    public redirectUrl = '/';\n\n    constructor(@Inject('env') private env, private http: HttpClient, public router: Router) {}\n\n    async isValidToken(autologinToken: AutologinToken = null) {\n        const authtoken = sessionStorage.getItem(SessionStorageVars.JWT);\n        console.log('isValidToken - authtoken', authtoken);\n        if (!authtoken && !autologinToken) {\n            return of(false);\n        }\n\n        return this.http\n            .post(this.getIsValidTokenUrl(), autologinToken ? autologinToken : {})\n            .pipe(\n                tap((jObj: any) => {\n                    console.log('isValidToken - response', jObj);\n                    if (!jObj.Result) {\n                        jObj.Message = jObj.Message ? jObj.Message : 'Login error...';\n\n                        // sessionStorage.removeItem(SessionStorageVars.JWT);\n                        // sessionStorage.removeItem(SessionStorageVars.CULTURE);\n                        // sessionStorage.removeItem(SessionStorageVars.UI_CULTURE);\n\n                        this.errorMessage = jObj.Message;\n                    }\n                })\n            )\n            .toPromise();\n    }\n\n    login(loginRequest: LoginRequest): Observable<LoginResponse> {\n        return this.http.post(this.getLoginUrl(), loginRequest).pipe(\n            map((loginResponse: LoginResponse) => {\n                const respCulture: string =\n                    loginResponse.Culture === undefined || loginResponse.Culture.length === 0\n                        ? window.navigator.language\n                        : loginResponse.Culture;\n                const respUiCulture: string =\n                    loginResponse.UICulture === undefined || loginResponse.UICulture.length === 0\n                        ? window.navigator.language\n                        : loginResponse.UICulture;\n                this.saveCulture(respCulture, respUiCulture);\n\n                if (!loginResponse.Result) {\n                    loginResponse.Message = loginResponse.Message ? loginResponse.Message : 'Login error...';\n                    sessionStorage.removeItem(SessionStorageVars.JWT);\n                    this.errorMessage = loginResponse.Message;\n                    return loginResponse;\n                }\n\n                sessionStorage.setItem(SessionStorageVars.JWT, loginResponse.JwtToken);\n                return loginResponse;\n            })\n        );\n    }\n\n    public getIsValidTokenUrl() {\n        return this.getBaseUrl() + 'token/';\n    }\n\n    public getLoginUrl() {\n        return this.getBaseUrl() + 'tokens/';\n        return this.getBaseUrl() + 'login/';\n    }\n\n    public getLogoutUrl() {\n        return this.getBaseUrl() + 'logout/';\n    }\n\n    getRedirectUrl(): string {\n        return this.redirectUrl;\n    }\n\n    setRedirectUrl(url: string): void {\n        this.redirectUrl = url;\n    }\n\n    /**\n     * Ritorna la base url del backend,\n     * caricata da un file di configurazione caricato dinamicamente (assets/environment.json)\n     */\n    public getBaseUrl() {\n        if (this.loginUrl) return this.loginUrl;\n\n        this.loginUrl = this.env.auth.url;\n\n        return this.loginUrl;\n    }\n\n    public logoff() {}\n\n    public saveCulture(culture = '', uiCulture = '') {\n        localStorage.setItem(SessionStorageVars.CULTURE, culture);\n        localStorage.setItem(SessionStorageVars.UI_CULTURE, uiCulture);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\n\nimport { TbAuthService } from './auth.service';\nimport { AutologinToken } from './models/autologin-token.model';\nimport { SessionStorageVars } from './session-storage';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TbAuthGuard implements CanActivate {\n    constructor(private authService: TbAuthService, private router: Router) {}\n\n    async canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n        console.log('ActivatedRouteSnapshot', next, state.url);\n\n        let autologinToken: AutologinToken;\n        const jwt = next.queryParams.hasOwnProperty('jwt') ? next.queryParams.jwt : null;\n        const subKey = next.queryParams.hasOwnProperty('subKey') ? next.queryParams.subKey : null;\n        if (jwt && subKey) {\n            autologinToken = {\n                JwtToken: jwt,\n                SubscriptionKey: subKey\n            };\n        }\n\n        const authtoken = sessionStorage.getItem(SessionStorageVars.JWT);\n\n        if (authtoken || autologinToken) {\n            // ho un token, ma ne verifico la validitÃ \n            const res = await this.authService.isValidToken(autologinToken);\n            console.log('isValidToken', res);\n            if (res.Success) {\n                return true;\n            } else {\n                this.router.navigate(['login']);\n                return false;\n            }\n        } else {\n            // non sono loggato quindi vado alla login\n            this.router.navigate(['login']);\n            return true;\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor, HttpResponse } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { SessionStorageVars } from './session-storage';\r\n\r\n@Injectable()\r\nexport class TbAuthInterceptor implements HttpInterceptor {\r\n    constructor() {}\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        /**\r\n         * Aggiungo a ogni httprequest l'header 'Authorization' con il nostro token\r\n         */\r\n        let token = JSON.stringify({\r\n            token: sessionStorage.getItem(SessionStorageVars.JWT)\r\n        });\r\n\r\n        if (token) {\r\n            request = request.clone({\r\n                setHeaders: {\r\n                    Authorization: token\r\n                }\r\n            });\r\n        }\r\n\r\n        /*\r\n         * Elabora la response di ogni chiamata http\r\n         */\r\n        return next\r\n            .handle(request)\r\n            .pipe\r\n            /**\r\n             * Nel caso di chiamate a tb-loader, ricevo le TbLoaderInfo che vengono messe in cache locale\r\n             */\r\n            // tap((ev: HttpEvent<any>) => {\r\n            //     if (ev instanceof HttpResponse) {\r\n            //         let auth = ev.headers.get(\"Tb-loader-info\");\r\n            //         if (auth) {\r\n            //             let respJson = JSON.parse(auth);\r\n            //             if (respJson) {\r\n            //                 this.infoService.setTbLoaderInfo(new TBLoaderInfo(respJson.tbLoaderName, respJson.tbLoaderId));\r\n            //                 this.logger.debug(\"TbLoaderInfo -> \", respJson);\r\n            //             }\r\n            //         }\r\n            //     }\r\n            // })\r\n            ();\r\n    }\r\n}\r\n","export class LoginRequest {\r\n    accountName = '';\r\n    password = '';\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { TbAuthService } from '../auth.service';\n\nimport { SessionStorageVars } from '../session-storage';\nimport { LoginRequest } from '../models/login-request';\n\n@Component({\n    selector: 'tb-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.scss']\n})\nexport class TbLoginComponent implements OnInit {\n    public capsLockOn = false;\n    public loading = false;\n    public loginRequest: LoginRequest = new LoginRequest();\n\n    constructor(public authService: TbAuthService, public router: Router) {}\n\n    ngOnInit() {\n        this.loadAccountName();\n    }\n\n    // ---------------------------------------------------------------------------------------------\n    keyUpFunction(event) {\n        if (event.keyCode === 13) {\n            if (this.loginRequest.accountName) this.login();\n        }\n        const capsOn = event.getModifierState && event.getModifierState('CapsLock');\n        this.capsLockOn = capsOn;\n    }\n\n    // -------------------------------------------------------------------------------------\n    disabledButton() {\n        return !this.loginRequest.accountName || this.loading;\n    }\n\n    // -------------------------------------------------------------------------------------\n    accountNameBlur() {}\n\n    // ---------------------------------------------------------------------------------------------\n    async login() {\n        this.authService.errorMessage = '';\n        this.saveAccountName();\n        this.loading = true;\n\n        const result = await this.authService\n            .login(this.loginRequest)\n            .toPromise()\n            .catch(err => {\n                this.loading = false;\n                console.error('Login Error', err);\n                this.authService.errorMessage = err.error && err.error.Message;\n                return;\n            });\n\n        if (!result) return;\n\n        // todo controlla come vengono mostrati errori sia login sia checkdb\n        if (result.Result) {\n            const url = this.authService.getRedirectUrl();\n            console.log('Redirect Url', url);\n            this.authService.errorMessage = '';\n            this.router.navigate([url]);\n        } else {\n            console.error('authService.errorMessage:', this.authService.errorMessage);\n            this.loading = false;\n        }\n    }\n\n    // -------------------------------------------------------------------------------------\n    public loadAccountName() {\n        this.loginRequest.accountName = localStorage.getItem(SessionStorageVars.ACCOUNT_NAME);\n    }\n\n    // -------------------------------------------------------------------------------------\n    public saveAccountName() {\n        localStorage.setItem(SessionStorageVars.ACCOUNT_NAME, this.loginRequest.accountName);\n    }\n}\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TbAuthService } from './auth.service';\nimport { SessionStorageVars } from './session-storage';\n\n@Component({\n    selector: 'tb-logout',\n    template: ''\n})\nexport class TbLogoutComponent {\n    constructor(public authService: TbAuthService, public router: Router) {\n        // const authtoken = sessionStorage.getItem(SessionStorageVars.JWT);\n        // if (authtoken) authService.logoff();\n        // router.navigate([authService.getLoginUrl()]);\n    }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { InputsModule } from '@progress/kendo-angular-inputs';\nimport { ButtonsModule } from '@progress/kendo-angular-buttons';\n\nimport { TbLoginComponent } from './pages/login.component';\nimport { TbLogoutComponent } from './logout.component';\nimport { TbAuthService } from './auth.service';\n\n@NgModule({\n    declarations: [TbLoginComponent, TbLogoutComponent],\n    imports: [CommonModule, FormsModule, InputsModule, ButtonsModule],\n    exports: [TbLoginComponent, TbLogoutComponent]\n})\nexport class TbAuthModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: TbAuthModule,\n            providers: [TbAuthService]\n        };\n    }\n}\n"],"names":[],"mappings":"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"}
