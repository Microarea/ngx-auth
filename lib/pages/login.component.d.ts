import { TbAuthService } from '../auth.service';
import { LoginRequest } from '../models/login-request';
import { AfterContentInit, Renderer2 } from '@angular/core';
import { Router } from '@angular/router';
import { MatDialog } from '@angular/material/dialog';
import * as i0 from "@angular/core";
export declare class TbLoginComponent implements AfterContentInit {
    authService: TbAuthService;
    router: Router;
    private dialog;
    private renderer;
    private doc?;
    private cachedCompanies;
    capsLockOn: boolean;
    validate: boolean;
    loading: boolean;
    loginRequest: LoginRequest;
    redirectUrl: string;
    buttonText: string;
    nextText: string;
    loginText: string;
    currentYear: string;
    createAccountUrl: string;
    changePasswordUrl: string;
    subscriptionSelection: boolean;
    showSignUp: boolean;
    loginSubscriptions: Array<{
        description: string;
        subscriptionkey: string;
        status: number;
        instancekey: string;
    }>;
    logoURL: string;
    hide: boolean;
    instancekey: string;
    isConnected: boolean;
    document?: Document;
    chooseSubscription: string;
    goodJob: string;
    subscription: string;
    instance: string;
    buttonBack: string;
    accountName: string;
    enterAccounName: string;
    welcome: string;
    enterCredentials: string;
    forgetPassword: string;
    dontshow: string;
    blocMaiusc: string;
    idleTimeoutMessage: string;
    upgradeWarningTitle: string;
    dropDownIsClicked: boolean;
    comboBoxIsClicked: boolean;
    iconIsClicked: boolean;
    dropdown: any;
    currentBrowserLanguage: string;
    languageIT: boolean;
    constructor(authService: TbAuthService, router: Router, dialog: MatDialog, renderer: Renderer2, doc?: any);
    ngAfterContentInit(): void;
    checkConnection(): Promise<void>;
    onSubChange(newValue: any): void;
    keyUpFunction(event: KeyboardEvent): void;
    disabledButton(): boolean;
    get isExpiredSession(): boolean;
    newUser(): void;
    back(): Promise<void>;
    login(): Promise<void>;
    convertUTCDateToLocalDate(date: Date): Date;
    FormatDateString: (date: Date) => string;
    FormatStartDateString: (date: Date) => string;
    FormatEndDateString: (date: Date) => string;
    NumberPad: (value: number, padding: number) => string;
    loadLoginData(): void;
    private saveLoginData;
    getCompaniesForUser(user: string): Promise<void>;
    private requestAndSortSubscriptions;
    private compareCompanies;
    goToForgotPassword(): void;
    forgotpassword(Title: string, Message: string, PlaceHolder: string): Promise<void>;
    isDropDownClicked(): void;
    toggle(dropdown: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<TbLoginComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TbLoginComponent, "tb-login", never, {}, {}, never, never>;
}
