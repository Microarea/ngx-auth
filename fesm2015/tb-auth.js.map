{"version":3,"file":"tb-auth.js.map","sources":["ng://@tb/auth/lib/models/storage-vars.ts","ng://@tb/auth/lib/auth.service.ts","ng://@tb/auth/lib/auth.guard.ts","ng://@tb/auth/lib/auth.interceptor.ts","ng://@tb/auth/lib/models/login-request.ts","ng://@tb/auth/lib/pages/login.component.ts","ng://@tb/auth/lib/logout.component.ts","ng://@tb/auth/lib/auth.module.ts"],"sourcesContent":["export class StorageVars {\r\n    public static JWT = 'M4_jwt_token';\r\n    public static EXP = 'M4_jwt_token_expiration_date';\r\n    public static CULTURE = 'M4_culture';\r\n    public static UI_CULTURE = 'M4_ui_culture';\r\n    public static ACCOUNT_NAME = 'M4_account_name';\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\n\nimport * as moment_ from 'moment';\nconst moment = moment_;\n\nimport { of, Observable } from 'rxjs';\nimport { tap, map } from 'rxjs/operators';\n\nimport { StorageVars } from './models/storage-vars';\n\nimport { AutologinToken } from './models/autologin-token.model';\nimport { LoginRequest } from './models/login-request';\nimport { LoginResponse } from './models/login-response';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TbAuthService {\n    public loginUrl: string;\n    public errorMessage: string;\n    public redirectUrl = '/';\n\n    constructor(@Inject('env') private env, private http: HttpClient, public router: Router) {}\n\n    async isValidToken(autologinToken: AutologinToken = null) {\n        const authtoken = localStorage.getItem(StorageVars.JWT);\n        console.log('isValidToken - authtoken', authtoken);\n        if (!authtoken && !autologinToken) {\n            return of(false);\n        }\n\n        return this.http\n            .post(this.getIsValidTokenUrl(), autologinToken ? autologinToken : {})\n            .pipe(\n                tap((jObj: any) => {\n                    console.log('isValidToken - response', jObj);\n                    if (!jObj.Result) {\n                        jObj.Message = jObj.Message ? jObj.Message : 'isValidToken error...';\n\n                        this.clearStorage();\n\n                        this.errorMessage = jObj.Message;\n                    }\n                })\n            )\n            .toPromise();\n    }\n\n    login(loginRequest: LoginRequest): Observable<LoginResponse> {\n        return this.http.post(this.getLoginUrl(), loginRequest).pipe(\n            map((loginResponse: LoginResponse) => {\n                if (!loginResponse.Result) {\n                    this.clearStorage();\n                    loginResponse.Message = loginResponse.Message ? loginResponse.Message : 'Login error...';\n                    this.errorMessage = loginResponse.Message;\n                    return loginResponse;\n                }\n\n                this.storageData(loginResponse);\n\n                return loginResponse;\n            })\n        );\n    }\n\n    private storageData(loginResponse: LoginResponse) {\n        const respCulture: string =\n            loginResponse.Culture === undefined || loginResponse.Culture.length === 0 ? window.navigator.language : loginResponse.Culture;\n        const respUiCulture: string =\n            loginResponse.UICulture === undefined || loginResponse.UICulture.length === 0\n                ? window.navigator.language\n                : loginResponse.UICulture;\n        this.saveCulture(respCulture, respUiCulture);\n\n        localStorage.setItem(StorageVars.JWT, loginResponse.JwtToken);\n\n        const exp = loginResponse.Exp ? moment(loginResponse.Exp) : moment().add(1, 'day');\n        localStorage.setItem(StorageVars.EXP, JSON.stringify(exp.valueOf()));\n    }\n\n    public getIsValidTokenUrl() {\n        return this.getBaseUrl() + 'token/';\n    }\n\n    public getLoginUrl() {\n        return this.getBaseUrl() + 'tokens/';\n        return this.getBaseUrl() + 'login/';\n    }\n\n    public getLogoutUrl() {\n        return this.getBaseUrl() + 'logout/';\n    }\n\n    getRedirectUrl(): string {\n        return this.redirectUrl;\n    }\n\n    setRedirectUrl(url: string): void {\n        this.redirectUrl = url;\n    }\n\n    /**\n     * Ritorna la base url del backend,\n     * caricata da un file di configurazione caricato dinamicamente (assets/environment.json)\n     */\n    public getBaseUrl() {\n        if (this.loginUrl) return this.loginUrl;\n\n        this.loginUrl = this.env.auth.url;\n\n        return this.loginUrl;\n    }\n\n    public logoff() {}\n\n    public saveCulture(culture = '', uiCulture = '') {\n        localStorage.setItem(StorageVars.CULTURE, culture);\n        localStorage.setItem(StorageVars.UI_CULTURE, uiCulture);\n    }\n\n    public clearStorage() {\n        localStorage.removeItem(StorageVars.JWT);\n        localStorage.removeItem(StorageVars.EXP);\n        localStorage.removeItem(StorageVars.CULTURE);\n        localStorage.removeItem(StorageVars.UI_CULTURE);\n    }\n\n    getExpiration() {\n        const expiration = localStorage.getItem(StorageVars.EXP);\n        const expiresAt = JSON.parse(expiration);\n        return moment(expiresAt);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\n\nimport * as moment_ from 'moment';\nconst moment = moment_;\n\nimport { TbAuthService } from './auth.service';\nimport { AutologinToken } from './models/autologin-token.model';\nimport { StorageVars } from './models/storage-vars';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class TbAuthGuard implements CanActivate {\n    constructor(private authService: TbAuthService, private router: Router) {}\n\n    async canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n        console.log('ActivatedRouteSnapshot', next, state.url);\n\n        let autologinToken: AutologinToken;\n        const jwt = next.queryParams.hasOwnProperty('jwt') ? next.queryParams.jwt : null;\n        const subKey = next.queryParams.hasOwnProperty('subKey') ? next.queryParams.subKey : null;\n        if (jwt && subKey) {\n            autologinToken = {\n                JwtToken: jwt,\n                SubscriptionKey: subKey\n            };\n        }\n\n        const authtoken = localStorage.getItem(StorageVars.JWT);\n        const expiration = localStorage.getItem(StorageVars.EXP);\n\n        if (!expiration || moment().isAfter(this.authService.getExpiration())) {\n            this.authService.errorMessage = 'Token expired';\n            this.authService.clearStorage();\n            this.router.navigate(['login']);\n            return true;\n        }\n\n        if (authtoken || autologinToken) {\n            // ho un token, ma ne verifico la validitÃ \n            const res = await this.authService.isValidToken(autologinToken);\n\n            // TODO test isValidToken\n            console.log('isValidToken', res);\n\n            if (res.Result) {\n                return true;\n            } else {\n                this.router.navigate(['login']);\n                return false;\n            }\n        } else {\n            // non sono loggato quindi vado alla login\n            this.router.navigate(['login']);\n            return true;\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor, HttpResponse } from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { StorageVars } from './models/storage-vars';\r\n\r\n@Injectable()\r\nexport class TbAuthInterceptor implements HttpInterceptor {\r\n    constructor() {}\r\n\r\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        /**\r\n         * Aggiungo a ogni httprequest l'header 'Authorization' con il nostro token\r\n         */\r\n        let token = JSON.stringify({\r\n            token: localStorage.getItem(StorageVars.JWT)\r\n        });\r\n\r\n        if (token) {\r\n            request = request.clone({\r\n                setHeaders: {\r\n                    Authorization: token\r\n                }\r\n            });\r\n        }\r\n\r\n        /*\r\n         * Elabora la response di ogni chiamata http\r\n         */\r\n        return next\r\n            .handle(request)\r\n            .pipe\r\n            /**\r\n             * Nel caso di chiamate a tb-loader, ricevo le TbLoaderInfo che vengono messe in cache locale\r\n             */\r\n            // tap((ev: HttpEvent<any>) => {\r\n            //     if (ev instanceof HttpResponse) {\r\n            //         let auth = ev.headers.get(\"Tb-loader-info\");\r\n            //         if (auth) {\r\n            //             let respJson = JSON.parse(auth);\r\n            //             if (respJson) {\r\n            //                 this.infoService.setTbLoaderInfo(new TBLoaderInfo(respJson.tbLoaderName, respJson.tbLoaderId));\r\n            //                 this.logger.debug(\"TbLoaderInfo -> \", respJson);\r\n            //             }\r\n            //         }\r\n            //     }\r\n            // })\r\n            ();\r\n    }\r\n}\r\n","export class LoginRequest {\r\n    accountName = '';\r\n    password = '';\r\n    subscriptionKey = null;\r\n    appid = 'GENERIC';\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { TbAuthService } from '../auth.service';\n\nimport { LoginRequest } from '../models/login-request';\nimport { StorageVars } from '../models/storage-vars';\n\n@Component({\n    selector: 'tb-login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.scss']\n})\nexport class TbLoginComponent implements OnInit {\n    public capsLockOn = false;\n    public loading = false;\n    public loginRequest: LoginRequest = new LoginRequest();\n\n    constructor(public authService: TbAuthService, public router: Router) {}\n\n    ngOnInit() {\n        this.loadAccountName();\n    }\n\n    // ---------------------------------------------------------------------------------------------\n    keyUpFunction(event) {\n        if (event.keyCode === 13) {\n            if (this.loginRequest.accountName) this.login();\n        }\n        const capsOn = event.getModifierState && event.getModifierState('CapsLock');\n        this.capsLockOn = capsOn;\n    }\n\n    // -------------------------------------------------------------------------------------\n    disabledButton() {\n        return !this.loginRequest.accountName || this.loading;\n    }\n\n    // -------------------------------------------------------------------------------------\n    accountNameBlur() {}\n\n    // ---------------------------------------------------------------------------------------------\n    async login() {\n        this.authService.errorMessage = '';\n        this.saveAccountName();\n        this.loading = true;\n\n        const result = await this.authService\n            .login(this.loginRequest)\n            .toPromise()\n            .catch(err => {\n                this.loading = false;\n                console.error('Login Error', err);\n                this.authService.errorMessage = err.error && err.error.Message;\n                return;\n            });\n\n        if (!result) return;\n\n        // todo controlla come vengono mostrati errori sia login sia checkdb\n        if (result.Result) {\n            const url = this.authService.getRedirectUrl();\n            console.log('Redirect Url', url);\n            this.authService.errorMessage = '';\n            this.router.navigate([url]);\n        } else {\n            console.error('authService.errorMessage:', this.authService.errorMessage);\n            this.loading = false;\n        }\n    }\n\n    // -------------------------------------------------------------------------------------\n    public loadAccountName() {\n        this.loginRequest.accountName = localStorage.getItem(StorageVars.ACCOUNT_NAME);\n    }\n\n    // -------------------------------------------------------------------------------------\n    public saveAccountName() {\n        localStorage.setItem(StorageVars.ACCOUNT_NAME, this.loginRequest.accountName);\n    }\n}\n","import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { TbAuthService } from './auth.service';\nimport { StorageVars } from './models/storage-vars';\n\n@Component({\n    selector: 'tb-logout',\n    template: ''\n})\nexport class TbLogoutComponent {\n    constructor(public authService: TbAuthService, public router: Router) {\n        // const authtoken = localStorage.getItem(StorageVars.JWT);\n        // if (authtoken) authService.logoff();\n        // router.navigate([authService.getLoginUrl()]);\n    }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { InputsModule } from '@progress/kendo-angular-inputs';\nimport { ButtonsModule } from '@progress/kendo-angular-buttons';\n\nimport { TbLoginComponent } from './pages/login.component';\nimport { TbLogoutComponent } from './logout.component';\nimport { TbAuthService } from './auth.service';\n\n@NgModule({\n    declarations: [TbLoginComponent, TbLogoutComponent],\n    imports: [CommonModule, FormsModule, InputsModule, ButtonsModule],\n    exports: [TbLoginComponent, TbLogoutComponent]\n})\nexport class TbAuthModule {\n    static forRoot(): ModuleWithProviders {\n        return {\n            ngModule: TbAuthModule,\n            providers: [TbAuthService]\n        };\n    }\n}\n"],"names":["moment"],"mappings":"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"}
